{
	"info": {
		"_postman_id": "31848622-d45ba96f-b5a3-4cac-b8e0-0c712d7216ea",
		"name": "Expense Splitter App Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "register",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fe3118c1-8bfb-4f6e-b0b0-d024f9491815",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "31848622-8dda070a-b0fe-4be0-83a4-4618784c6f9d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"user\": {\r\n  \"name\": \"{{name}}\",\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"avatarUrl\":\"{{avatarurl}}\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{localhost}}/api/auth/users/register",
							"protocol": "http",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"api",
								"auth",
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "02ea6e3e-73ce-473a-9780-2fb8b9adde61",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.environment.set(\"userId\", response.user.id);",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('message', 'status', 'accessToken', 'refreshToken', 'user');",
									"    pm.expect(responseData.user).to.be.an('object').that.has.all.keys('id', 'name', 'email', 'avatarUrl');",
									"});",
									"",
									"",
									"pm.test(\"AccessToken and RefreshToken are non-empty strings\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.accessToken).to.exist.and.to.be.a('string').and.to.have.lengthOf.greaterThan(0);",
									"    pm.expect(responseData.refreshToken).to.exist.and.to.be.a('string').and.to.have.lengthOf.greaterThan(0);",
									"});",
									"",
									"",
									"pm.test(\"Validate the user object contains the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.user).to.exist;",
									"    ",
									"    const userFields = ['id', 'name', 'email', 'avatarUrl'];",
									"    userFields.forEach(field => {",
									"        pm.expect(responseData.user).to.have.property(field);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('user');",
									"    pm.expect(responseData.user).to.have.property('email').that.is.a('string').and.satisfies(email => {",
									"        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
									"        return emailRegex.test(email);",
									"    }, \"Email format is invalid\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "31848622-51688b78-d9f5-4542-bb39-86a104e54194",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"user\": {\r\n  \"name\": \"{{name}}\",\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"avatarUrl\":\"{{avatarurl}}\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{localhost}}/api/auth/users/login",
							"protocol": "http",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"api",
								"auth",
								"users",
								"login"
							]
						},
						"description": "## Login User\n\nThis endpoint is used to authenticate a user by logging them in to the application. It requires the user's credentials to be sent in the request body.\n\n### Request\n\n- **Method**: POST\n    \n- **Endpoint**: `http://{{localhost}}/api/auth/users/login`\n    \n\n#### Request Body\n\nThe request body must be in JSON format and should contain the following structure:\n\n``` json\n{\n  \"user\": {\n    \"name\": \"string\",        // The name of the user\n    \"email\": \"string\",       // The email address of the user\n    \"password\": \"string\",    // The password for the user account\n    \"avatarUrl\": \"string\"    // (Optional) The URL of the user's avatar\n  }\n}\n\n ```\n\n### Response\n\nThe response will return a JSON object. The structure of the response may vary based on the authentication result. In the case of a successful login, a token or user details may be returned. However, if the login fails or the endpoint is not found, the response will include:\n\n- **Status Code**: 404\n    \n- **Content-Type**: application/json\n    \n- {\"message\": \"\" // A message indicating the error or status}\n    \n\n### Notes\n\n- Ensure that the provided credentials are correct to avoid a 404 error.\n    \n- The `avatarUrl` field is optional and can be omitted if not applicable."
					},
					"response": []
				},
				{
					"name": "getProfile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"if(response.user.emailVerificationToken){\r",
									"pm.environment.set('emailVerificationToken', response.user.emailVerificationToken);\r",
									"}\r",
									"pm.environment.set('id', response.user._id);",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate the user object structure\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.user).to.exist.and.to.be.an('object');",
									"",
									"    pm.expect(responseData.user).to.have.all.keys('_id', 'name', 'email', 'password', 'avatarUrl', 'loginCount', 'authProvider', 'isAdmin', 'isActive', 'createdAt', 'updatedAt', '__v');",
									"",
									"    pm.expect(responseData.user.name).to.be.a('string');",
									"    pm.expect(responseData.user.email).to.be.a('string').and.to.match(/^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/); // Simple email format check",
									"    pm.expect(responseData.user.password).to.be.a('string');",
									"    pm.expect(responseData.user.avatarUrl).to.be.a('string');",
									"    pm.expect(responseData.user.loginCount).to.be.a('number');",
									"    pm.expect(responseData.user.isAdmin).to.be.a('boolean');",
									"    pm.expect(responseData.user.isActive).to.be.a('boolean');",
									"    pm.expect(responseData.user.createdAt).to.be.a('string');",
									"    pm.expect(responseData.user.updatedAt).to.be.a('string');",
									"    pm.expect(responseData.user.__v).to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.user).to.be.an('object').that.includes.keys('_id', 'name', 'email', 'password', 'avatarUrl', 'loginCount', 'authProvider', 'isAdmin', 'isActive', 'createdAt', 'updatedAt', '__v');",
									"    ",
									"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
									"    pm.expect(responseData.user.email).to.match(emailRegex, \"Email format is invalid\");",
									"});",
									"",
									"",
									"pm.test(\"isAdmin and isActive are boolean values\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.user).to.be.an('object').that.includes.keys('isAdmin', 'isActive');",
									"    pm.expect(responseData.user.isAdmin).to.be.a('boolean');",
									"    pm.expect(responseData.user.isActive).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"CreatedAt and UpdatedAt are in valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.user).to.exist;",
									"",
									"    const createdAt = responseData.user.createdAt;",
									"    const updatedAt = responseData.user.updatedAt;",
									"",
									"    const isValidDate = (date) => {",
									"        return !isNaN(Date.parse(date));",
									"    };",
									"",
									"    pm.expect(isValidDate(createdAt)).to.be.true;",
									"    pm.expect(isValidDate(updatedAt)).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "31848622-65c66688-7855-4440-b244-056bb7844d6c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{localhost}}/api/auth/users/verify",
							"protocol": "http",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"api",
								"auth",
								"users",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "refresh-access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields: message and status\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('message', 'status');",
									"});",
									"",
									"",
									"pm.test(\"Status is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.status).to.exist.and.to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Message is a string and not null\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.not.be.null;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "31848622-a164ad3b-3afc-4119-acf2-d4347599677e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"user\": {\r\n  \"email\": \"vivek@example.com\",\r\n  \"password\": \"8318940526@^Aman\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "http://{{localhost}}/api/auth/users/refresh-access",
							"protocol": "http",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"api",
								"auth",
								"users",
								"refresh-access"
							]
						}
					},
					"response": []
				},
				{
					"name": "logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response should contain a message field\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"",
									"pm.test(\"Message must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "31848622-3dcee4f9-b362-4760-8784-420d1f18c302",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"user\": {\r\n  \"name\": \"Alice\",\r\n  \"email\": \"vivek@example.com\",\r\n  \"password\": \"8318940526@^Aman\",\r\n  \"avatarUrl\":\"https://thevivekyadav.me/images/img1\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "http://{{localhost}}/api/auth/users/logout",
							"protocol": "http",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"api",
								"auth",
								"users",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "reset-password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {",
									"    pm.expect(pm.response.code).to.eql(401);",
									"});",
									"",
									"",
									"pm.test(\"Response contains a message field\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is correctly set to application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "31848622-e0c42131-6567-43d6-9219-2d27a9a9380f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"992040526@^Aman\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{localhost}}/api/auth/users/reset-password",
							"protocol": "http",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"api",
								"auth",
								"users",
								"reset-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "get-all-user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response.status).to.eql(404);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is text/html\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
									"});",
									"",
									"",
									"pm.test(\"Response body is an empty string\", function () {",
									"    pm.expect(pm.response.text()).to.equal(\"\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Request URL is correct\", function () {",
									"    pm.expect(pm.request.url.toString()).to.equal(\"http://localhost:8080/api/auth/users\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "31848622-516a8e9c-96e1-4da7-82f3-5772e81c5a7c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"name\": \"Group1\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:8080/api/auth/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"auth",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "update-role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "06e8627c-a273-4c0a-b26e-417231161f04",
								"exec": [
									"pm.test(\"Response status code is 401\", function () {",
									"    pm.expect(pm.response.code).to.eql(401);",
									"});",
									"",
									"",
									"pm.test(\"Response contains a message field\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"",
									"pm.test(\"The message field must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('message').that.is.a('string').and.is.not.empty;",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "31848622-085d4674-75ed-400d-a6e6-fb0370c8b402",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://{{localhost}}/api/auth/users/{{userId}}/update-role/admin",
							"protocol": "http",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"api",
								"auth",
								"users",
								"{{userId}}",
								"update-role",
								"admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteuser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"",
									"pm.test(\"Response has a message field\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"",
									"pm.test(\"Message should be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "31848622-791bc1b5-abf9-4850-bd10-c647358280fb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://{{localhost}}/api/auth/users/6846745cfd4415d4b088f2e6/delete-user",
							"protocol": "http",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"api",
								"auth",
								"users",
								"6846745cfd4415d4b088f2e6",
								"delete-user"
							]
						}
					},
					"response": []
				},
				{
					"name": "verify email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.eql(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has a content type of application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"",
									"pm.test(\"Response contains a message field\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"",
									"pm.test(\"The message field must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "31848622-25586a82-23f3-474f-9f40-da79ff023958",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"user\": {\r\n  \"name\": \"Alice\",\r\n  \"email\": \"vivek@example.com\",\r\n  \"password\": \"8318940526@^Aman\",\r\n  \"avatarUrl\":\"https://thevivekyadav.me/images/img1\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "http://{{localhost}}/api/auth/users/{{emailVerificationToken}}/email-verify",
							"protocol": "http",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"api",
								"auth",
								"users",
								"{{emailVerificationToken}}",
								"email-verify"
							]
						}
					},
					"response": []
				}
			],
			"id": "31848622-a91d348f-5b1b-43dc-9ed4-1cdad957f460"
		},
		{
			"name": "Group",
			"item": [
				{
					"name": "createGroup",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "326aacd3-4e5f-437c-80c4-98bec459f2fc",
								"exec": [
									"\r",
									"const response = pm.response.json();\r",
									"pm.environment.set(\"groupId\", response.group.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "31848622-95b287c1-f815-4b41-a91f-49932b9a4ac3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"name\": \"Groups testing\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{localhost}}/api/groups/create",
							"protocol": "http",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"api",
								"groups",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "addusertogroup",
					"id": "31848622-74b86cfd-f4a7-4744-957b-4198e8449ca5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userIds\": \"{{userId1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{localhost}}/api/groups/{{groupId}}/add-member",
							"protocol": "http",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"api",
								"groups",
								"{{groupId}}",
								"add-member"
							]
						}
					},
					"response": []
				},
				{
					"name": "listGroupsForUser",
					"id": "31848622-7ef985eb-1b87-482c-bccc-2fbb9de50bc7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{localhost}}/api/groups/",
							"protocol": "http",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"api",
								"groups",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "list group members",
					"id": "31848622-90819c70-87e0-4b0c-9fe0-9fd9475d5a3c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/groups/685519b15a6800e1cdbdf1d9/members",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"groups",
								"685519b15a6800e1cdbdf1d9",
								"members"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find group by id",
					"id": "31848622-84fe59cd-0811-47a0-b9c8-5c1b309cb99c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/groups/{{value}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"groups",
								"{{value}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update group",
					"id": "31848622-5c816dcc-f7b1-4643-877f-89d63f2b1f77",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"name\": \"Trip to Manali\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:8080/api/groups/684c3a8dd777d8c0b19839b4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"groups",
								"684c3a8dd777d8c0b19839b4"
							]
						}
					},
					"response": []
				},
				{
					"name": "update group",
					"id": "31848622-acd1fb01-61c1-402c-ab4a-07cbeb99d256",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"name\": \"Trip to Manali v2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/groups/684c3a8dd777d8c0b19839b4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"groups",
								"684c3a8dd777d8c0b19839b4"
							]
						}
					},
					"response": []
				},
				{
					"name": "remove member",
					"id": "31848622-dff4ed52-31cb-4831-8b40-a87400af857e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/groups/684c3a8dd777d8c0b19839b4/remove-member/6847bfe47e0017678c1f8bb6",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"groups",
								"684c3a8dd777d8c0b19839b4",
								"remove-member",
								"6847bfe47e0017678c1f8bb6"
							]
						}
					},
					"response": []
				},
				{
					"name": "getGroupDebts",
					"id": "31848622-ed1aed87-1d14-46ed-967d-78c824ca8cf5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"groupId\": \"685434c6fb08d62904cfb74e\",\r\n  \"paidTo\": \"6854322367deced98f420f66\",\r\n  \"amount\": 10\r\n}\r\n"
						},
						"url": {
							"raw": "http://localhost:8080/api/groups/685519b15a6800e1cdbdf1d9/debts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"groups",
								"685519b15a6800e1cdbdf1d9",
								"debts"
							]
						}
					},
					"response": []
				},
				{
					"name": "list all groups",
					"id": "31848622-ca0d4d4f-1f16-4ab4-90b2-6faf73c7850a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/groups/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"groups",
								""
							]
						}
					},
					"response": []
				}
			],
			"id": "31848622-5ac51710-845c-4906-a4ad-9d95210b6db2"
		},
		{
			"name": "Expense",
			"item": [
				{
					"name": "createExpense",
					"id": "31848622-93e4f53d-14c9-49b9-bf0d-612ddcb98cd9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"groupId\": \"685519b15a6800e1cdbdf1d9\",\r\n    \"paidBy\": \"6854325867deced98f420f69\",\r\n    \"amount\": 250,\r\n    \"description\": \"Lunch at ChaiCode\",\r\n    \"date\": \"2025-06-13\",\r\n    \"splitAmong\": [\r\n        {\r\n            \"userId\": \"6854322367deced98f420f66\",\r\n            \"percentage\": 100\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/expense/create",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"expense",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all expense for the group",
					"id": "31848622-63bef183-208b-4a3c-a4d8-bf196a66c158",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"groupId\": \"684c3a8dd777d8c0b19839b4\",\r\n    \"paidBy\": \"6847bfe47e0017678c1f8bb6\",\r\n    \"amount\": 250,\r\n    \"description\": \"Lunch at cafe\",\r\n    \"date\": \"2025-06-13\",\r\n    \"splitAmong\": [\r\n        {\r\n            \"userId\": \"6846745cfd4415d4b088f2e6\",\r\n            \"percentage\": 40\r\n        },\r\n        {\r\n            \"userId\": \"68469cce61891cc8de60d939\",\r\n            \"percentage\": 60\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "http://localhost:8080/api/expense/685434c6fb08d62904cfb74e",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"expense",
								"685434c6fb08d62904cfb74e"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/expense/:id",
					"id": "31848622-1285d21c-dd80-4580-8690-0ed146bb674d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"update\",\r\n    \"amount\": 250,\r\n    \"paidBy\":\"6651d67df1493a340f055698\",\r\n    \"splitAmong\": [\r\n        {\r\n            \"userId\": \"6846745cfd4415d4b088f2e6\",\r\n            \"percentage\": 30\r\n        },\r\n        {\r\n            \"userId\": \"68469cce61891cc8de60d939\",\r\n            \"percentage\": 60\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/expense/684c5691c515e1e7bf21ea8e",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"expense",
								"684c5691c515e1e7bf21ea8e"
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/expense/:id",
					"id": "31848622-fb58a2a0-4cb4-4445-bf5c-350a1ce380e1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"groupId\": \"684c3a8dd777d8c0b19839b4\",\r\n    \"paidBy\": \"6847bfe47e0017678c1f8bb6\",\r\n    \"amount\": 250,\r\n    \"description\": \"Lunch at cafe\",\r\n    \"date\": \"2025-06-13\",\r\n    \"splitAmong\": [\r\n        {\r\n            \"userId\": \"6846745cfd4415d4b088f2e6\",\r\n            \"percentage\": 40\r\n        },\r\n        {\r\n            \"userId\": \"68469cce61891cc8de60d939\",\r\n            \"percentage\": 60\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "http://localhost:8080/api/expense/6852e45a574f106be5b28402",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"expense",
								"6852e45a574f106be5b28402"
							]
						}
					},
					"response": []
				}
			],
			"id": "31848622-de5ac6bf-c50f-413c-91c3-e9719334601a"
		},
		{
			"name": "Settelments",
			"item": [
				{
					"name": "create settelments",
					"id": "31848622-b197f59e-e8ab-4e1b-ba59-70ebb864381b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"groupId\": \"685519b15a6800e1cdbdf1d9\",\r\n  \"paidTo\": \"6854325867deced98f420f69\",\r\n  \"amount\": 100\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/settlement/create",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"settlement",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "suggest",
					"id": "31848622-debb95d6-e28d-4027-9ae6-2a8b11c53579",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"groupId\": \"685519b15a6800e1cdbdf1d9\",\r\n  \"paidTo\": \"6854325867deced98f420f69\",\r\n  \"amount\": 100\r\n}\r\n"
						},
						"url": {
							"raw": "http://localhost:8080/api/settlement/suggest/685519b15a6800e1cdbdf1d9/6854325867deced98f420f69",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"settlement",
								"suggest",
								"685519b15a6800e1cdbdf1d9",
								"6854325867deced98f420f69"
							]
						}
					},
					"response": []
				}
			],
			"id": "31848622-4d9d1b72-b68a-44ed-9c94-fddb006dbd4b"
		},
		{
			"name": "Balance",
			"item": [
				{
					"name": "getgroupbalance",
					"id": "31848622-b7b97d72-64a7-43f0-8a5d-6330136e9400",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/balance/685519b15a6800e1cdbdf1d9/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"balance",
								"685519b15a6800e1cdbdf1d9",
								""
							]
						}
					},
					"response": []
				}
			],
			"id": "31848622-8bd53766-6671-447d-98f2-8986646aac27"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "1da78866-0417-4734-9367-44929fcbdaa8",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "93c00167-b398-4e52-9fa1-86f5431ec60f",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "server",
			"value": "",
			"type": "string"
		},
		{
			"key": "localhost",
			"value": "",
			"type": "string"
		}
	]
}